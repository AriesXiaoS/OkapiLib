<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on Okapi Docs</title>
    <link>https://okapilib.github.io/OkapiLib/tutorials/</link>
    <description>Recent content in Tutorials on Okapi Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://okapilib.github.io/OkapiLib/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/tutorials/chassiscontrollertutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/tutorials/chassiscontrollertutorial/</guid>
      <description>Chassis Controller Okapi provides a way to control a ChassisModel using closed-loop control, like PID, so you don&amp;rsquo;t have to rewrite a driveStraight() function every year. Rather than making a model directly, we can instead give ChassisModelParams to a ChassisController, which will instantiate the model for itself:
#include &amp;lt;chassis/chassisController.h&amp;gt; ChassisControllerPid controller(SkidSteerModelParams&amp;lt;2&amp;gt;({2_m, 3_m, 4_m, 5_m}, //Skid steer chassis with two motors per side QuadEncoder(1, 2, true), //Left encoder (reversed) QuadEncoder(3, 4)), //Right encoder PidParams(0.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/tutorials/chassismodeltutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/tutorials/chassismodeltutorial/</guid>
      <description>Chassis Model Okapi has a way to represent the most common robot chassis, skid steer and x-drive. With this model we can tell the robot how to move around in a general sense.
For example, a skid steer chassis with two motors per side and two quad encoders:
#include &amp;lt;chassis/chassisModel.h&amp;gt; SkidSteerModel&amp;lt;2&amp;gt; model({2_m, 3_m, 4_m, 5_m}, //Left motors: 2 &amp;amp; 3, right motors: 4 &amp;amp; 5 QuadEncoder(1, 2, true), //Left encoder (reversed) QuadEncoder(3, 4)); //Right encoder  Or you can have an x-drive with one motor per corner and two quad encoders:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/tutorials/genconttutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/tutorials/genconttutorial/</guid>
      <description>Generic Controller Often times, you have a closed-loop controller, sensor, and a few motors acting together as a system, and you wind up with code that powers each motor individually like this:
#include &amp;lt;device/pid.h&amp;gt; int port1 = 1, port2 = 2; //Motor ports int pot = 1; //Potentiometer Pid controller(1, 0.2, 0.3); //PID controller with kP = 1, kI = 0.2, kD = 0.3 controller.setTarget(1500); //Set the target to 1500 on the potentiometer while (1) { controller.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/tutorials/motortutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/tutorials/motortutorial/</guid>
      <description>Motor Writing the full Motor constructor any time you want to specify a motor gets quite tedious, so Okapi has some literals that make specifying motors much easier:
Motor foo(2); //Motor on port 2 Motor foo = 2_m; //Equivalent literal Motor foo(2, true); //Reversed motor on port 2 Motor foo = 2_rm; //Equivalent literal  Okapi also provides cubic control if you prefer to drive that way:
CubicMotor foo(2); //Motor on port 2 CubicMotor foo = 2_3m; //Equivalent literal CubicMotor foo(2, true); //Reversed motor on port 2 CubicMotor foo = 2_3rm; //Equivalent literal  Both Motor and CubicMotor can be given to a ChassisModel, and the behavior of tank and arcade will change accordingly.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://okapilib.github.io/OkapiLib/tutorials/pidtutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/tutorials/pidtutorial/</guid>
      <description>PID Proportional-Integral-Derivative (PID) control is a simple and useful closed-loop controller. Say you have a subsystem with a motor and a potentiometer:
#include &amp;lt;device/pid.h&amp;gt; int port = 1; //Motor port int pot = 1; //Potentiometer Pid controller(1, 0.2, 0.3); //PID controller with kP = 1, kI = 0.2, kD = 0.3 controller.setTarget(1500); //Set the target to 1500 on the potentiometer while (1) { controller.loop(analogRead(pot)); //Loop the controller with the new pot reading motorSet(port, controller.</description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>https://okapilib.github.io/OkapiLib/tutorials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/tutorials/</guid>
      <description>Tutorials This section contains various tutorials for the different parts of OkapiLib. Scroll down or view the menus on the left to pick a tutorial.
Motor Writing the full Motor constructor any time you want to specify a motor gets quite tedious, so Okapi has some literals that make specifying motors much easier:
Motor foo(2); //Motor on port 2 Motor foo = 2_m; //Equivalent literal Motor foo(2, true); //Reversed motor on port 2 Motor foo = 2_rm; //Equivalent literal  Okapi also provides cubic control if you prefer to drive that way:</description>
    </item>
    
  </channel>
</rss>