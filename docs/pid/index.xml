<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pids on OkapiLib Docs</title>
    <link>https://okapilib.github.io/OkapiDocs/pid/</link>
    <description>Recent content in Pids on OkapiLib Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://okapilib.github.io/OkapiDocs/pid/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pid</title>
      <link>https://okapilib.github.io/OkapiDocs/pid/pid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiDocs/pid/pid/</guid>
      <description>Pid The Pid class implements the Pid algorithm, with some quality-of-life changes to support online tuning.
Constructor //Signature Pid(const float ikP, const float ikI, const float ikD, const float ikBias = 0) Pid(const PidParams&amp;amp; params)     Parameter Description     ikP Proportional gain   ikI Integral gain   ikD Derivative gain   ikBias Controller bias (this value added to output, default 0)   params PidParams    loop //Signature virtual float loop(const float inewReading)  Do one iteration of Pid math to compute a new motor power.</description>
    </item>
    
    <item>
      <title>VelPid</title>
      <link>https://okapilib.github.io/OkapiDocs/pid/velpid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiDocs/pid/velpid/</guid>
      <description>VelPid The VelPid class implements the Pid algorithm for the velocity domain, with some quality-of-life changes to support online tuning.
Constructor //Signature VelPid(const float ikP, const float ikD) VelPid(const VelPidParams&amp;amp; params)     Parameter Description     ikP Proportional gain   ikI Integral gain   ikD Derivative gain   ikBias Controller bias (this value added to output, default 0)   params VelPidParams    loopVel //Signature virtual float loopVel(const float inewReading)  Do one iteration of velocity math to compute a new filtered velocity.</description>
    </item>
    
  </channel>
</rss>