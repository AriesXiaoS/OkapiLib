<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Odometries on OkapiLib Docs</title>
    <link>https://okapilib.github.io/OkapiLib/odometry/</link>
    <description>Recent content in Odometries on OkapiLib Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://okapilib.github.io/OkapiLib/odometry/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OdomMath</title>
      <link>https://okapilib.github.io/OkapiLib/odometry/odommath/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/odometry/odommath/</guid>
      <description>OdomMath The OdomMath class provides static implementations for common odometry operations.
computeDistanceToPoint //Signature static float computeDistanceToPoint(const float ix, const float iy, const OdomState&amp;amp; istate)  Calculate the distance from the robot to a point, (ix, iy).
   Parameter Description     ix X coordinate   iy Y coordinate   istate Odometry state    computeAngleToPoint //Signature static float computeAngleToPoint(const float ix, const float iy, const OdomState&amp;amp; istate)  Calculate the angle from the robot to a point, (ix, iy).</description>
    </item>
    
    <item>
      <title>Odometry</title>
      <link>https://okapilib.github.io/OkapiLib/odometry/odometry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://okapilib.github.io/OkapiLib/odometry/odometry/</guid>
      <description>Odometry The Odometry class tracks the robot as it moves, computing its position in the field frame. It is a singleton so its main method, loop, can be called in a task.
setParams //Signature static void setParams(OdomParams&amp;amp; iparams)  Set the model, scale, and turnScale parameters.
   Parameter Description     iparams OdomParams    setScales //Signature static void setScales(const float iscale, const float iturnScale)  Set the scale and turnScale parameters.</description>
    </item>
    
  </channel>
</rss>